# Application Configuration
spring.application.name=ai-true-jobs
server.port=8081
spring.main.banner-mode=console

# Development Database (H2) - Primary for development
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=false

# JPA Configuration - Optimized for latest versions
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jpa.open-in-view=false

# Database Connection Pool
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=600000

# File Upload Configuration - Enhanced
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.file-size-threshold=2KB

# Custom Application Properties
app.upload.dir=uploads
openai.api.key=${OPENAI_API_KEY:demo-key-replace-with-real}
openai.api.url=https://api.openai.com/v1
jwt.secret=${JWT_SECRET:mySecretKeyThatIsAtLeast256BitsLongForHS256Algorithm}
jwt.expiration=86400000
jwt.refresh-expiration=604800000
cors.allowed-origins=${CORS_ORIGINS:http://localhost:3000,http://localhost:3001}

# OAuth2 Configuration
app.oauth2.authorizedRedirectUris=http://localhost:3000/auth/oauth2/redirect,http://localhost:3001/auth/oauth2/redirect

# Google OAuth2 - DISABLED for development (add environment variables to enable)
# spring.security.oauth2.client.registration.google.client-id=${GOOGLE_OAUTH2_CLIENT_ID:}
# spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_OAUTH2_CLIENT_SECRET:}
# spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
# spring.security.oauth2.client.registration.google.scope=openid,profile,email
# spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/oauth2/callback/{registrationId}
# spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
# spring.security.oauth2.client.provider.google.token-uri=https://www.googleapis.com/oauth2/v4/token
# spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
# spring.security.oauth2.client.provider.google.user-name-attribute=sub

# LinkedIn OAuth2 - DISABLED for development (add environment variables to enable)
# spring.security.oauth2.client.registration.linkedin.client-id=${LINKEDIN_OAUTH2_CLIENT_ID:}
# spring.security.oauth2.client.registration.linkedin.client-secret=${LINKEDIN_OAUTH2_CLIENT_SECRET:}
# spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
# spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile,r_emailaddress
# spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/oauth2/callback/{registrationId}
# spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
# spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
# spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/people/~:(id,localizedFirstName,localizedLastName,profilePicture(displayImage~digitalmediaAsset:playableStreams))
# spring.security.oauth2.client.provider.linkedin.user-name-attribute=id

# GitHub OAuth2 - DISABLED for development (add environment variables to enable)
# spring.security.oauth2.client.registration.github.client-id=${GITHUB_OAUTH2_CLIENT_ID:}
# spring.security.oauth2.client.registration.github.client-secret=${GITHUB_OAUTH2_CLIENT_SECRET:}
# spring.security.oauth2.client.registration.github.authorization-grant-type=authorization_code
# spring.security.oauth2.client.registration.github.scope=user:email
# spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/oauth2/callback/{registrationId}

# Microsoft OAuth2 - DISABLED for development (add environment variables to enable)
# spring.security.oauth2.client.registration.microsoft.client-id=${MICROSOFT_OAUTH2_CLIENT_ID:}
# spring.security.oauth2.client.registration.microsoft.client-secret=${MICROSOFT_OAUTH2_CLIENT_SECRET:}
# spring.security.oauth2.client.registration.microsoft.authorization-grant-type=authorization_code
# spring.security.oauth2.client.registration.microsoft.scope=openid,profile,email
# spring.security.oauth2.client.registration.microsoft.redirect-uri={baseUrl}/oauth2/callback/{registrationId}
# spring.security.oauth2.client.provider.microsoft.authorization-uri=https://login.microsoftonline.com/common/oauth2/v2.0/authorize
# spring.security.oauth2.client.provider.microsoft.token-uri=https://login.microsoftonline.com/common/oauth2/v2.0/token
# spring.security.oauth2.client.provider.microsoft.user-info-uri=https://graph.microsoft.com/v1.0/me
# spring.security.oauth2.client.provider.microsoft.user-name-attribute=id

# Logging Configuration - Optimized
logging.level.com.aitrujobs=INFO
logging.level.org.springframework.security=WARN
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
management.info.env.enabled=true
